module cnn;


use CommandLine: all;
use Structures: all;
use StdIO: all;

export all;

string flops2String( double flops)
{
  if (flops > 1e12) {
    res = sprintf( "%.2f TFlops", flops/1e12);
  } else if (flops > 1e9) {
    res = sprintf( "%.2f GFlops", flops/1e9);
  } else if (flops > 1e6) {
    res = sprintf( "%.2f MFlops", flops/1e6);
  } else if (flops > 1e3) {
    res = sprintf( "%.2f KFlops", flops/1e3);
  } else {
    res = sprintf( "%.2f  Flops", flops);
  }
  return res;
}

#if 0
inline
float[*] averageOuter( float[+] array)
{
  return with {
            ([0] <= iv < take( [1], shape( array))) : array[iv];
         } : fold( +, genarray( drop([1], shape( array)), 0f)) / tof( shape( array)[0]);
}
#else
inline
float[*] averageOuter( float[+] array)
{
  return with {
            (. <= iv <= .) : sum( with { (. <= [i] <= .) : array[[i]++iv]; 
                                  } : genarray( take( [1], shape( array)), 0f));
         } : genarray( drop([1], shape( array)), 0f) / tof( shape( array)[0]);
}
#endif


inline
int MaxPos( float[.,.,.,.,.] output)
{
   n = shape( output)[0];
   max = output[[0,0,0,0,0]];
   res = 0;
   for( i=0; i<n; i++) 
      if( output[[i,0,0,0,0]] > max) {
        max = output[[i,0,0,0,0]];
        res = i;
      }
   return res;
}

//------------------------------------------------------------------------------
// Error functions
//------------------------------------------------------------------------------

inline
float MeanSquaredError( float[*] result, float[*] labels)
{
  return sum ( 0.5f * ( labels - result) * ( labels - result) );
}

int[.], double MeanSquaredErrorFlop( int[.] result_shp, int[.] labels_shp)
{
  return (result_shp, tod (4*prod(result_shp) + (prod(result_shp)-1) ));
}

//------------------------------------------------------------------------------
// Commandline functions
//------------------------------------------------------------------------------

int, int, int, int, float
CnnReadParameters( int epochs, int batchsize, int trainings, int tests, float rate)
{
   if( (argc() == 2) && (strcmp( argv(1), "-h") == 0 )) {
      printf( "%s -mt <n> -e <epocs> -b <batchsize> -tr <training-items>"
              " -te <test-items> -r <rate>\n", argv(0));
      epochs = 0;
      batchsize = 0;
      trainings = 0;
      tests = 0;
      rate = 0f;
   } else {
      if( (argc() >1)  && ( strcmp( argv(1), "-mt") == 0 )) {
        off = 2;
      } else {
        off = 0;
      }
      while( argc() > off+1) {
         if( strcmp( argv(off+1), "-e") == 0 ) {
            epochs = toi( argv( off+2));
         } else if( strcmp( argv(off+1), "-b") == 0 ) {
            batchsize = toi( argv( off+2));
         } else if( strcmp( argv(off+1), "-tr") == 0 ) {
            trainings = toi( argv( off+2));
         } else if( strcmp( argv(off+1), "-te") == 0 ) {
            tests = toi( argv( off+2));
         } else if( strcmp( argv(off+1), "-r") == 0 ) {
            rate = tof( argv( off+2));
         } else {
            printf( "ignoring non-recognised parameter %s!\n", argv(off+1));
            off --;
         }
         off += 2;
      }
   }

   return (epochs, batchsize, trainings, tests, rate);
}

