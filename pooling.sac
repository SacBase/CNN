module pooling;


use Array: all;

export {AveragePool, AveragePoolFlop,
       BackAveragePool, BackAveragePoolFlop,
       MaxPool, BackMaxPool};

inline
float average( float[*] array)
{
   return sum( array) / tof( prod( shape( array)));
}

inline
float maximum( float[*] array)
{
   return with {
            (0*shape(array) <= iv < shape(array)) : array[iv];
          } : fold( max, minfloat());
}


inline
float[*] AveragePool( float[*] in, int[.] filter)
//
// assert( dim(in) >= shape(filter)[0] )
// assert( shape(out) == shape(in)/filter )
// 
{
  ones = genarray( [dim( in)], 1);
  filter = drop( shape( filter), ones) ++ filter;
  shp = shape( in) / filter;
  /*
   * out = { iv -> average( { ov -> in[iv+ov] | ov < filter})
   *             | iv < shp};
   */
  out = with {
          (. <= iv <= .) : average( with {
                                      (. <= ov <= .) : in[iv*filter+ov];
                                    } : genarray( filter, 0f));
        } : genarray( shp, 0f);
  return out;
}

int[.], double AveragePoolFlop( int[.] in_shp, int[.] filter)
{
   ones = genarray( shape( in_shp), 1);
   filter = drop( shape( filter), ones) ++ filter;
   shp = in_shp / filter;
   return (shp, tod (prod(shp) * (prod(shape(filter))-1)) );
}

inline
float[*] BackAveragePool( float[*] d_out, int[.] filter )
{
  ones = genarray( [dim( d_out)], 1);
  filter = drop( shape( filter), ones) ++ filter;
  shp = shape( d_out) * filter;
  d_in = with {
           (. <= iv <=.) : d_out[iv/filter] / tof( prod( filter));
         } : genarray( shp, 0f);
  return d_in;
}

int[.], double BackAveragePoolFlop( int[.] d_out_shp, int[.] filter)
{
   ones = genarray( shape( d_out_shp), 1);
   filter = drop( shape( filter), ones) ++ filter;
   shp = d_out_shp * filter;
   return (shp, tod (prod(shp) ) );
}


inline
float[*] MaxPool( float[*] in, int[.] filter)
//
// assert( dim(in) >= shape(filter)[0] )
// assert( shape(out) == shape(in)/filter )
//
{
  ones = genarray( [dim( in)], 1);
  filter = drop( shape( filter), ones) ++ filter;
  shp = shape( in) / filter;
  /*
   * out = { iv -> maximum( { ov -> in[iv+ov] | ov < filter})
   *             | iv < shp};
   */
  out = with {
          (. <= iv <= .) : maximum( with {
                                      (. <= ov <= .) : in[iv*filter+ov];
                                    } : genarray( filter, 0f));
        } : genarray( shp, 0f);
  return out;
}

inline
float[*] BackMaxPool( float[*] d_out, int[.] filter )
{
  ones = genarray( [dim( d_out)], 1);
  filter = drop( shape( filter), ones) ++ filter;
  shp = shape( d_out) * filter;
  d_in = with {
           (. <= iv <=.) : d_out[iv/filter] / tof( prod( filter));
         } : genarray( shp, 0f);
  return d_in;
}

