module mnist-batch;

use Array: all;
use StdIO: all;
use RuntimeError: all;

export all;

#define BATCHSIZE 8

int fgetint( File & f)
{
  val = 256*256*256*toi( fgetc( f));
  val += 256*256*toi( fgetc( f));
  val += 256 * toi( fgetc( f));
  val += toi( fgetc( f));
  
  return val;
}

float[.,.,.,.] ReadImagesBatch( String::string file)
{
  err, f = fopen( file, "r");
  if( System::fail(err)) {
    printf( "Error occured when trying to open file %s for reading", file);
  }

  fseek( f, 4, 0);

  num_images = fgetint( f);

  if( num_images % BATCHSIZE != 0) {
    printf( "%d images found; only using %d to match BATCHSIZE of %d\n",
            num_images, (num_images/BATCHSIZE) * BATCHSIZE, BATCHSIZE)
    num_images = (num_images/BATCHSIZE) * BATCHSIZE;
  }
  num_rows = fgetint( f);
  num_cols = fgetint( f);

  res = genarray( [num_images/BATCHSIZE, num_rows, num_cols, BATCHSIZE], 0f);

  for( i=0; i< num_images/BATCHSIZE; i++)
    for( l=0; l< BATCHSIZE; l++)
      for( j=0; j< num_rows; j++)
        for( k=0; k< num_cols; k++)
          res[i,j,k,l] = tof( fgetc( f));

  fclose( f);
  return res;
}

int[.] ReadLabels( int categories, String::string file)
{
  err, f = fopen( file, "r");
  if( System::fail(err)) {
    error( 1, "Error occured when trying to open file %s for reading\n", file);
  }

  fseek( f, 4, 0);

  num_labels = fgetint( f);
  res = genarray( [num_labels], 0);

  for( i=0; i< num_labels; i++) {
    res[i] = toi( fgetc( f));
    if( (res[i]<0) || (res[i]>=categories)) {
      error( 1, "Label is out of range; value is %d but should be in [0,%d]!\n",
                res[i], categories-1);
    }
  }

  fclose( f);
  return res;
}

